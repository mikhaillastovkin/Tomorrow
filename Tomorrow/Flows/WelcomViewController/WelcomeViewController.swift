//
//  WelcomeViewController.swift
//  –ó–∞–≤—Ç—Ä–∞ –≤ –ª–∞–≥–µ—Ä—å
//
//  Created by –ú–∏—Ö–∞–∏–ª –õ–∞—Å—Ç–æ–≤–∫–∏–Ω on 21.04.2022.
//

import UIKit
import AudioToolbox

final class WelcomeViewController: UIViewController {

    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.contentInset = UIEdgeInsets(top: contentInset, left: 0, bottom: contentInset, right: 0)
        scrollView.showsVerticalScrollIndicator = false
        return scrollView
    }()

    private lazy var stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.spacing = Constants.offsetOtherSubject.y
        stackView.alignment = .trailing
        stackView.distribution = .fill
        return stackView
    }()

    private let contentInset = Constants.offsetSuperView.y * 4

    let messageArray = [
        ("–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å, –∑–Ω–∞—á–∏—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π. –ù–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ–¥–µ–ª—å —Ç—ã —Å—Ç–∞–Ω–µ—à—å –¥–ª—è –Ω–∏—Ö —Å–∞–º—ã–º –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º - –≤–æ–∂–∞—Ç—ã–º!", 0),
        ("–ú—ã —Å–∞–º–∏ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ—Å–≤–∞–∏–≤–∞–ª–∏ —ç—Ç—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –æ—á–µ–Ω—å –∏ –µ–µ –ø–æ–ª—é–±–∏–ª–∏.", 5),
        ("–í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–æ–±—Ä–∞–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ª–∞–≥–µ—Ä–Ω—É—é —Å–º–µ–Ω—É –±–µ–∑ –ø—Ä–æ–±–ª–µ–º. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ –∏–≥—Ä—ã!", 3),
        ("–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–∞–∂–µ –≤ –ª–µ—Å—É. \n–û–¥–Ω–∞–∫–æ, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Å–µ –∂–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.", 3),
        ("–°—Ç–∞—Ç—å–∏ –∏ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ üíö", 5),
        ("–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫—Ä–∏–∑–∏—Å–∞—Ö –≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã.", 5),
        ("–£–¥–∞—á–∏ –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!", 3)
    ]

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        presentMessages()
    }

    private func setupUI() {
        view.setGreenGradient()
        view.addSubview(scrollView)
        scrollView.addSubview(stackView)
        setConstraints()
    }

    private func setConstraints() {
        let safeArea = view.safeAreaLayoutGuide
        let offset = Constants.offsetSuperView

        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.leftAnchor.constraint(equalTo: view.leftAnchor),
            scrollView.rightAnchor.constraint(equalTo: view.rightAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),

            stackView.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor, constant: 0),
            stackView.leftAnchor.constraint(equalTo: safeArea.leftAnchor, constant: offset.x),
            stackView.rightAnchor.constraint(equalTo: safeArea.rightAnchor, constant: -offset.x),
            stackView.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor, constant: 0)
        ])
    }

    private func presentMessages() {
        var timeoffset = DispatchTime.now()
        for message in messageArray {
            timeoffset = timeoffset.advanced(by: DispatchTimeInterval.seconds(message.1))
            DispatchQueue.main.asyncAfter(deadline: timeoffset) { [weak self] in
                self?.addMessage(message: message.0)
                AudioServicesPlayAlertSoundWithCompletion(SystemSoundID(kSystemSoundID_Vibrate)) {}
                self?.checkHeightScrollContent()
            }
        }
        DispatchQueue.main.asyncAfter(deadline: timeoffset + 3) { [weak self] in
            guard let self = self
            else { return }
            self.addStartButton()
            AudioServicesPlayAlertSoundWithCompletion(SystemSoundID(kSystemSoundID_Vibrate)) {}
            self.checkHeightScrollContent()
        }
    }

    private func checkHeightScrollContent() {
        view.layoutIfNeeded()
        let stacViewHeight = stackView.frame.height
        let scrollViewHeight = scrollView.frame.height
        if stacViewHeight + contentInset > scrollViewHeight {
            scrollView.setContentOffset(
                CGPoint(
                    x: 0,
                    y: stacViewHeight + contentInset - scrollViewHeight),
                animated: true)
        }
    }

    private func addMessage(message: String) {
        let messageView = SubArticleView(backgroundColor: .white)
        messageView.translatesAutoresizingMaskIntoConstraints = false

        let label = UILabel()
        label.text = message
        label.numberOfLines = 0
        label.font = .mainText
        label.textColor = .green3
        label.textAlignment = .right
        label.translatesAutoresizingMaskIntoConstraints = false

        messageView.transform = CGAffineTransform(translationX: view.frame.width, y: 0)
        messageView.alpha = 0

        messageView.addSubview(label)
        stackView.addArrangedSubview(messageView)

        NSLayoutConstraint.activate([
            messageView.leftAnchor.constraint(greaterThanOrEqualTo: stackView.leftAnchor, constant: (stackView.frame.width / 5).rounded()),
            label.topAnchor.constraint(equalTo: messageView.topAnchor, constant: Constants.offsetOtherSubject.y),
            label.leftAnchor.constraint(greaterThanOrEqualTo: messageView.leftAnchor, constant: Constants.offsetOtherSubject.x),
            label.rightAnchor.constraint(equalTo: messageView.rightAnchor, constant: -Constants.offsetOtherSubject.x),
            label.bottomAnchor.constraint(equalTo: messageView.bottomAnchor, constant: -Constants.offsetOtherSubject.y)
        ])

        UIView.animate(withDuration: 0.5) {
            messageView.transform = .identity
            messageView.alpha = 1
        }
    }

    private func addStartButton() {
        let button = UIButton(type: .system)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle(" –ù–∞—á–Ω—ë–º?", for: .normal)
        button.titleLabel?.font = .mainMenuItemTitleLabel
        button.setImage(UIImage(systemName: "leaf.fill"), for: .normal)
        button.tintColor = .green3
        button.backgroundColor = .white
        button.layer.cornerRadius = 25
        button.layer.masksToBounds = true
        button.addTarget(
            self,
            action: #selector(closeView),
            for: .touchUpInside)

        stackView.addArrangedSubview(button)

        NSLayoutConstraint.activate([
            button.leftAnchor.constraint(equalTo: stackView.leftAnchor, constant: Constants.offsetOtherSubject.x),
            button.heightAnchor.constraint(equalToConstant: 50),
        ])

        button.transform = CGAffineTransform(translationX: view.frame.width, y: 0)
        button.alpha = 0

        UIView.animate(withDuration: 0.5) {
            button.transform = .identity
            button.alpha = 1
        }
    }

    @objc private func closeView() {
        UserDefaults.standard.set(Date(), forKey: "firstStart")
        let mainMenu = TabBarBuilder().build()
        mainMenu.modalPresentationStyle = .fullScreen
        present(mainMenu, animated: true, completion: nil)
    }
}
